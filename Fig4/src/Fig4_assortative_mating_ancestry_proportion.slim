//rank with random tie method function
function (*) rank_with_random_ties(*x)
{
	N = size(x);
	ranks = integer(N);
	sorted_x = sort(x);
	
	// Calculate ranks
	for (i in 0:(N-1))
	{
		ranks[i] = which(sorted_x == x[i])[0] + 1;
	}
	
	// Detect and resolve ties
	for (i in 0:(N-1))
	{
		current_rank = ranks[i];
		tie_indices = which(ranks == current_rank);
		
		if (size(tie_indices) > 1)
		{
			random_tie_ranks = sample(current_rank:(current_rank+size(tie_indices)-1), size(tie_indices), F);
			ranks[tie_indices] = random_tie_ranks;
		}
	}
	return ranks;
}

initialize()
{
	initializeSLiMModelType("nonWF");
	
	// OUTPUT PARAMETERS
	// ----------------------------
	
	if (!exists("wd")) // Set working directory
		defineConstant("wd", "~/Dropbox/PENN_STATE_PROJECTS/Matt_admixture_review/assort_mating_slim_code/output");
	if (!exists("output_name"))
		defineConstant("output_name", "out"); // To run default names make an empty string
	if (!exists("sample_size"));
	defineConstant("sample_size", 100);
	if (!exists("sample_frequency"));
	defineConstant("sample_frequency", 1); // How often the population is sampled ie 1 = every generation 2 = every other generation
	
	// POPULATION SIZE PARAMETERS
	// ----------------------------
	
	if (!exists("total_pop_size"))
		defineConstant("total_pop_size", asInteger(2000)); // Starting number of individuals in population 'a'
	if (!exists("admix_prop"))
		defineConstant("admix_prop", 0.5); // Starting number of individuals in population 'b'

	// Mating Parameters
	// ----------------------------
	
	if (!exists("rho"))
		defineConstant("rho", 0.99); //correlation factor for mating
	
	// ----------------------------------------------------
	//  GENETIC COMPONENT --> Genomic Elements
	// ----------------------------------------------------
	
	initializeMutationType("m1", 0.5, "f", 0.0); // Tag population a ancestry
	m1.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 2886);
	initializeMutationRate(0.0);
	rates = c(0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01, 0.5, 0.01);
	ends = c(247, 248, 491, 492, 692, 693, 884, 885, 1066, 1067, 1238, 1239, 1398, 1399, 1545, 1546, 1686, 1687, 1822, 1823, 1957, 1958, 2090, 2091, 2205, 2206, 2312, 2313, 2413, 2414, 2503, 2504, 2583, 2584, 2660, 2661, 2724, 2725, 2787, 2788, 2835, 2836, 2886);
	initializeRecombinationRate(rates, ends);

}

1 first(){
	
	sim.addSubpop("p1", total_pop_size);
	inds = p1.individuals;
	
	// Tag genomic ancestry of population 'A' with marker mutations (m1)
	// Each marker mutation represents 1Mb
	indA = sample(inds, asInteger(total_pop_size*admix_prop)); // Select a mate
	indA.genomes.addNewMutation(m1, 0.0, 0:sim.chromosome.lastPosition);
	
	// Add color
	for (ind in inds)
	{
		// Color Based on Genotype
		value = ind.countOfMutationsOfType(m1) / (sim.chromosome.lastPosition * 2 + 2);
		ind.color = rgb2color(hsv2rgb(c(0.6, 1.0, value)));
	}
	
	ancestry = inds.countOfMutationsOfType(m1) / (sim.chromosome.lastPosition * 2 + 2);
	inds.tagF = ancestry;
	
	// Population stats file headings - write to file
	stats_header_string = paste("Generation", "PopulationSize", "MeanAncestry", sep=",");
	output_stats_file_name = ("/sim_pop_stats_per_generation_" + output_name + ".csv");
	writeFile(wd + output_stats_file_name, stats_header_string, append=F);
	
	// Ancestry sample file headings - write to file
	ancestry_sample_header_string = paste("Generation", "Individual", "Ancestry_Proportion", sep=",");
	output_ancestry_sample_file_name = ("/sim_ancestry_sample_" + output_name + ".csv");
	writeFile(wd + output_ancestry_sample_file_name, ancestry_sample_header_string, append=F);

}


1: first() {
	
	inds = p1.individuals;
	
	ancestry = inds.tagF;
	
	//ranks phenotypes
	phenoRank = rank_with_random_ties(ancestry);
	
	//bivariate distribution for rho correlation
	randBivar = rmvnorm(asInteger(length(inds)/2), c(0,0), matrix(c(1,rho,rho,1), nrow=2));
	
	//randBivar ranks
	bivarRanks = matrix(rank_with_random_ties(randBivar), ncol=2);
	
	//matching phenoRank to corresponding bivarRank
	matesMatrix = sapply(bivarRanks, "which(phenoRank == applyValue);");
	
	//matching the phenotype to the corresponding phenoRank from the matesMatrix
	pheno_matesMatrix= matrix(ancestry[matesMatrix], ncol=2);

	IDs = asFloat(matrix(matesMatrix, ncol=2));
	pheno_matesMatrix = cbind(IDs[,0], pheno_matesMatrix[,0], IDs[,1], pheno_matesMatrix[,1]);
	
	defineGlobal("pheno_pairs", pheno_matesMatrix);
	
	//correlation test
	ancestry1=c(pheno_matesMatrix[,1]);
	ancestry2=c(pheno_matesMatrix[,3]);
	print(paste("Phenotype correlation:", cor(ancestry1, ancestry2), "\n"));
}


reproduction()
{
	//crossing pairs for offspring
	for (i in seqLen(nrow(pheno_pairs)))
	{
		parent1 = p1.individuals[drop(asInteger(pheno_pairs[i,0]))];
		parent1.tagF = pheno_pairs[i,1];
		parent2 = p1.individuals[drop(asInteger(pheno_pairs[i,2]))];
		parent2.tagF = pheno_pairs[i,3];
		
		for (i in seqLen(rpois(1,2)))
		{
			offspring = p1.addCrossed(parent1, parent2);
			ancestry = offspring.countOfMutationsOfType(m1) / (sim.chromosome.lastPosition * 2 + 2);
			
			offspring.tagF = ancestry;
			
			// Color Based on Genotype
			offspring.color = rgb2color(hsv2rgb(c(0.6, 1.0, ancestry)));
		}
		
		parent1.fitnessScaling = 0.0;
		parent2.fitnessScaling = 0.0;
	
	}
	
	//parents will reproduce only once per tick
	self.active = 0;
}


1: late()
{
	// ------------------------------------------------------------
	//  Sample individuals to get ancestry distribution
	// ------------------------------------------------------------
	
	if (sim.cycle % sample_frequency == 0) // Samples individuals in population to get ancestry sample
	{
		
		if (p1.individuals.length() < sample_size)
			sample_size = p1.individuals.length();
		
		selected_inds = sample(p1.individuals, sample_size); // Select inds from pop to sample ancestry
		
		for (ind in selected_inds) // For each of the selected inds
		{
			// Write output
			output_ancestry_sample_string = paste(sim.cycle, ind, (ind.countOfMutationsOfType(m1) / (sim.chromosome.lastPosition * 2 + 2)), sep=",");
			output_ancestry_sample_file_name = ("/sim_ancestry_sample_" + output_name + ".csv");
			writeFile(wd + output_ancestry_sample_file_name, output_ancestry_sample_string, append=T);
		}
	}
}

1:200 late()
{
	// -----------------------------------------------------------
	//  OUTPUT/RUN --> Run the model and print standard outputs
	// -----------------------------------------------------------
	
	inds = p1.individuals;
	
	// provide feedback on progress for command line users
	generation_counter = paste("Simulation Generation: ", sim.cycle);
	print(generation_counter);
	
	// calculate the ratio of pop_a_inds in the total population to file
	ratio = (sum(p1.individuals.z) / p1.individuals.length());
	
	// calculate population size statistics
	pop_size = p1.individuals.length();
	
	// calculate the overall pop a ancestry
	pop_a_ancestry_all = mean(inds.countOfMutationsOfType(m1) / (sim.chromosome.lastPosition * 2 + 2));
	
	// write outputs
	output_string = paste(sim.cycle, pop_size, pop_a_ancestry_all, sep=",");
	output_stats_file_name = ("/sim_pop_stats_per_generation_" + output_name + ".csv");
	writeFile(wd + output_stats_file_name, output_string, append=T);
}
